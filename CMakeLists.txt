CMAKE_MINIMUM_REQUIRED(VERSION 3.18.4 FATAL_ERROR)

PROJECT(Gearoenix)

SET(PROJECT_DESCRIPTION "A cross-platform C++ game engine.")

SET(GX_VERSION_MAJOR 0)
SET(GX_VERSION_MINOR 3) # RTX version
SET(GX_VERSION_PATCH 0)
SET(GX_VERSION "${GX_VERSION_MAJOR}.${GX_VERSION_MINOR}.${GX_VERSION_PATCH}")

# Test coverage
OPTION(GX_COVERAGE_ENABLED "Enables the measurement of test coverages" OFF)

IF (GX_COVERAGE_ENABLED)
    MESSAGE(STATUS "Coverage enabled")
    SET(GX_COVERAGE_COMPILER_FLAGS "-fprofile-instr-generate -fcoverage-mapping")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GX_COVERAGE_COMPILER_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GX_COVERAGE_COMPILER_FLAGS}")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${GX_COVERAGE_COMPILER_FLAGS}")
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${GX_COVERAGE_COMPILER_FLAGS}")
ENDIF (GX_COVERAGE_ENABLED)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake/)
INCLUDE(gx-compile-lib)
INCLUDE(gx-download-file)
INCLUDE(gx-flag-util)
INCLUDE(gx-imgui)

MESSAGE(STATUS "Gearoenix is going to be compiled for ${CMAKE_SYSTEM_NAME}")

IF (MSVC)
    SET(CMAKE_CXX_FLAGS "/std:c++latest ${CMAKE_CXX_FLAGS}")
    GX_REPLACE_FLAG(CMAKE_CXX_FLAGS "/W3" "/W4")
    SET(GEAROENIX_EXE_TARGET "WIN32")
ELSE ()
    SET(CMAKE_CXX_FLAGS "-std=c++20 ${CMAKE_CXX_FLAGS}")
ENDIF ()

IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
    SET(LINUX TRUE)
ENDIF()

IF (APPLE)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -x objective-c")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -x objective-c++")
ENDIF ()

IF (LINUX)
    SET(GX_LIBS ${GX_LIBS} dl)
ENDIF ()

SET(GX_SDK_PATH "${CMAKE_SOURCE_DIR}/sdk")
SET(GX_SDK_LIB_PATH "${GX_SDK_PATH}/libs/")

SET(GX_SDL2_PATH "${GX_SDK_PATH}/sdl2")
GX_DOWNLOAD_FILE("https://www.libsdl.org/release/SDL2-2.0.14.zip" "${GX_SDL2_PATH}")
GX_COMPILE_LIB(${GX_SDL2_PATH})
SET(GX_SDL2_INCLUDE_DIRS "${GX_SDL2_PATH}/include")
INCLUDE_DIRECTORIES(${GX_SDL2_INCLUDE_DIRS})
SET(GX_SDL2_BUILD_DIRS "${GX_SDL2_PATH}/gx-build")
IF(LINUX)
    SET(GX_LIBS ${GX_LIBS} ${GX_SDL2_BUILD_DIRS}/libSDL2main.a ${GX_SDL2_BUILD_DIRS}/libSDL2.a)
ENDIF()

SET(GX_STB_PATH "${GX_SDK_PATH}/stb")
GX_DOWNLOAD_FILE("https://github.com/nothings/stb/archive/master.zip" "${GX_STB_PATH}")
SET(GX_STB_INCLUDE_DIRS "${GX_STB_PATH}")
INCLUDE_DIRECTORIES(${GX_STB_INCLUDE_DIRS})

SET(GX_VULKAN_HEADERS_PATH "${GX_SDK_PATH}/vulkan-headers")
GX_DOWNLOAD_FILE("https://github.com/KhronosGroup/Vulkan-Headers/archive/master.zip" "${GX_VULKAN_HEADERS_PATH}")
SET(GX_VULKAN_HEADERS_INCLUDE_DIRS "${GX_VULKAN_HEADERS_PATH}/include")
INCLUDE_DIRECTORIES(${GX_VULKAN_HEADERS_INCLUDE_DIRS})

#SET(GX_BULLET3_PATH "${GX_SDK_PATH}/bullet3")
#GX_DOWNLOAD_FILE("https://github.com/bulletphysics/bullet3/archive/master.zip" "${GX_BULLET3_PATH}")
#GX_COMPILE_LIB(${GX_BULLET3_PATH})

SET(GX_IMGUI_PATH "${GX_SDK_PATH}/imgui")
GX_DOWNLOAD_FILE("https://github.com/ocornut/imgui/archive/master.zip" "${GX_IMGUI_PATH}")
GX_PREPARE_IMGUI(${GX_IMGUI_PATH})
INCLUDE_DIRECTORIES(${GX_IMGUI_PATH})
INCLUDE_DIRECTORIES(${GX_IMGUI_PATH}/backends)

SET(GX_BOOST_PATH "${GX_SDK_PATH}/boost")
GX_DOWNLOAD_FILE("https://dl.bintray.com/boostorg/release/1.74.0/source/boost_1_74_0.zip" "${GX_BOOST_PATH}")
INCLUDE_DIRECTORIES(${GX_BOOST_PATH})

ADD_SUBDIRECTORY(gearoenix)
ADD_SUBDIRECTORY(editor)
ADD_SUBDIRECTORY(examples)
ADD_SUBDIRECTORY(tests)