SET(GX_ENGINE_DXR_SRC_DIR ${GX_ENGINE_SRC_DIR}/dxr)
SET(GX_ENGINE_DXR_SRC
        ${GX_ENGINE_DXR_SRC_DIR}/shaders/gx-dxr-shd-common.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-adapter.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-adapter.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-buffer.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-buffer.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-build-configuration.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-check.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-command.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-command.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-descriptor.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-descriptor.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-device.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-device.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-engine.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-engine.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-loader.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-mesh.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-mesh.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-model.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-model.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-pipeline.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-pipeline.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-queue.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-queue.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-shader.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-shader.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-submission.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-submission.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-swapchain.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-swapchain.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-texture.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-texture.hpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-uploader.cpp
        ${GX_ENGINE_DXR_SRC_DIR}/gx-dxr-uploader.hpp
        PARENT_SCOPE)
		
FILE(GLOB DXR_SHADERS ${GX_ENGINE_DXR_SRC_DIR}/shaders/*)

FOREACH(SHADER_FILE ${DXR_SHADERS})
	GET_FILENAME_COMPONENT(FILE_NAME ${SHADER_FILE} NAME)
	GET_FILENAME_COMPONENT(LAST_EXT ${FILE_NAME} EXT)

	# .hlsli or .h
	IF (NOT ${LAST_EXT} MATCHES  "\.(.*)\.hlsl$")
		LIST(APPEND ALL_DXR_INCLUDES ${SHADER_FILE})
	ENDIF ()
ENDFOREACH()

FOREACH(SHADER_FILE ${DXR_SHADERS})
	GET_FILENAME_COMPONENT(FILE_NAME ${SHADER_FILE} NAME)
	GET_FILENAME_COMPONENT(LAST_EXT ${FILE_NAME} EXT)

	# .hlsl
	IF (${LAST_EXT} MATCHES  "\.(.*)\.hlsl$")
		LIST(APPEND ALL_DXR_INCLUDES ${SHADER_FILE})
		COMPILE_SHADER(${DXR_DIR}/shaders ${SHADER_FILE} "${ALL_DXR_INCLUDES}" SHADER_OUT)
		LIST(POP_BACK ALL_DXR_INCLUDES)
		
		LIST(APPEND ALL_DXR_SHADERS ${SHADER_OUT})
	ENDIF ()
ENDFOREACH()

ADD_CUSTOM_TARGET(dxr_shaders ALL DEPENDS ${ALL_DXR_SHADERS})